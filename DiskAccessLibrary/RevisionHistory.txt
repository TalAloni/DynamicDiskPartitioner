Revision History:
-----------------
1.1.0 - LDM related bugfix.
        NTFS related bugfix and code clean up.

1.1.1 - Minor enhancements.

1.1.2 - Better handling of a corrupted LDM database.

1.1.3 - Disabled file system caching for virtual disks.

1.1.4 - Fixed GPT partition size detection bug.
        Allow reading from disks that are opened for write access by other applications.

1.1.5 - Improved disk detection mechanism.
        Added limited VMDK support (monolithic flat).

1.1.6 - Use the SetFileValidData() Windows API call to extend virtual disks faster.

1.1.7 - Fixed VMDK related bug (flat files that have a space in their filename).
        Added support for reading a monolithic sparse VMDK.

1.1.8 - Fixed NTFS related issues.

1.1.9 - Disks are now orderered according to disk number.
        Code clean up.

1.2.0 - NTFS related bugfixes.
        Write operations on readonly disks are no longer silently ignored and now raising exceptions, added missing readonly check to VMDK files.

1.2.1 - Minor enhancements and fixes.

1.2.2 - Minor NTFS changes.

1.2.3 - Fixed: LDM extent record now properly support the 0x40 flag.
        Added helper methods for taking a disk online/offline.

1.2.4 - NTFS related fixes.

1.2.5 - Added support for reading dynamic VHDs.

1.2.6 - More meaningful exceptions types are now thrown on errors.
        Dynamic VHD related bugfix.

1.2.7 - Minor improvements.

1.2.8 - Bugfix: CRC32 was not updated when GPT partition was extended.
      - Bugfix: Invalid protective MBR partition was written during GPT disk initialization.
      - Bugfix: A few usable sectors may have been marked as unusable during GPT disk initialization.
      - Bugfix: VHD was not extended to the correct size.

1.2.9 - We now use the same caching policy for virtual disk read and write operations. (Workaround for hosts without KB981166).
      - Bugfix: GPT header checksum verification failed if the size of the partition entries was not a multiple of sector size.

1.3.0 - Fixed a bug related to the RESUME boot sector.

1.3.1 - Adding a disk to RAID-5 volume is now faster thanks to multithreaded parity calculation (when applicable).

1.3.2 - Adding a disk to RAID-5 volume now use less read / write cache so it requires less RAM.

1.3.3 - Better handling of removable disks.

1.3.4 - Disk images can now be locked for exclusive access.

1.3.5 - We now use noncached I/O operations when working with virtual disks.

1.3.6 - Improved handling of disk read errors.
        API to retrieve disk description and serial number.

1.3.7 - Proper handling of disks with no serial number.

1.3.8 - Minor improvements.

1.3.9 - Minor improvements.

1.4.0 - API improvements.

1.4.1 - Improved volume locking mechanism.

1.4.2 - Support for disks with 4KB sectors.
        Minor improvements and bugfixes to DiskImage and inheriting classes.
        Bugfix: RawDiskImage.Extend had issue with closing the filestream.
        Bugfix: allocation within the private region of a dynamic disk did not function properly.
        API: Added RAM-Disk implementation.
        API: Added RawDiskImage.Create method.
        API: Added BasicDiskHelper.GetUnallocatedExtents method.

1.4.3 - Bugfix: MirroredVolume.BytesPerSector reported wrong number of bytes per sector when the first volume was not operational.
        Bugfix: DynamicDiskHelper.IsMoveLocationValid ignored allocated extents.
        API: Added DiskGroupGuid property to DynamicDisk.

1.4.4 - Bugfix: DynamicVolumeHelper looked for volume extents outside of the disk group.
        Bugfix: RetainHelper.IsVolumeRetained did not properly iterate components of mirrored volume.
        NTFS: Properly trim result array when caller tries to read more bytes than the record contains.
        NTFS: Return empty byte array when trying to read from offset larger than file length.
        LockHelper.LockAllVolumesOrNone will attempt to lock only mounted volumes.
        API improvements.

1.4.5 - IFileSystem: Added FileOptions parameter to OpenFile.
        DeviceInterfaceUtils: Added GetDeviceList method.
        Minor changes and improvements.

1.4.6 - Win32Errors enum: Added ERROR_INVALID_DATA
        Bugfix: The second KLOG page was not read.
        Minor changes and improvements.
        Corrected documentation.

1.4.7 - Bugfix: NTFS File Records that exceeded 511 bytes were corrupted during write.
        Minor improvements to NTFS Data Run record implementation.

1.4.8 - NTFS: ClusterUsageBitmap: Cosmetic improvements.
        NTFS: Throw InvalidDataException if FILE or INDX record signature is invalid.
        NTFS: NonResidentAttributeRecord: Minor optimization.
        NTFS: NonResidentAttributeRecord: Added GetClustersInUse() method.        
        VHD: BlockAllocationTable: Improved implementation.
        VHD: DynamicDiskHeader: Improved implementation.
        VHD: Implemented dynamic VHD write functionality.
        Minor changes and improvements.

1.4.9 - NTFS: AttributeListEntry: throw InvalidDataException when length is invalid.
        NTFS: NTFSVolume: Added GetFileRecordsInDirectoryFromMft() method for recovery purposes.
        VHD: CreateDynamicDisk now accepts any multiple of sector size as disk size.
        VHD: Create renamed to CreateFixedDisk, checks that disk size is a multiple of sector size.
        VHD: Added AreSectorsInUse() method.
        RawDiskImage: Circumvented FileStream buffering which resulted in reading more sectors than required.

1.5.0 - Bugfix: IOExceptions thrown had Win32 error code set instead of HResult.
        Better handling of broken disk drivers (e.g. Dataram RAMDisk v4.4.0 RC36).
        IOExceptionHelper: Moved ThrowIOError() method from FileStreamEx class to IOExceptionHelper class.
        IOExceptionHelper: Added GetWin32ErrorCode() and GetExceptionHResult() methods.
        NTFS: Major implementation improvements.
        Win32Error: Corrected underlying type to ushort.
        Win32Error: Added file system related error codes.
        FileStreamEx: Optimized implementation.
        FileStreamEx: Added ReadOverlapped() and WriteOverlapped() methods.
        FileStreamEx: Added SetValidLength() method.
        FileStreamEx: Added flushToDisk parameter to Flush() implementation.
        Disk: Marked IsReadOnly property as virtual.
        RawDiskImage: Added option to use overlapped IO.
        VirtualHardDisk: Added option to use overlapped IO.
        VirtualMachineDisk: Bugfix: Extent opened for write when IsReadOnly was true.
        Added DiskFullException implementation.
        Added AlreadyExistsException implementation.
        Added DirectoryNotEmptyException implementation.

1.5.1 - PhysicalDisk: Added isReadOnly constructor parameter.
        DiskExtent: Added IsReadOnly property.
        Volume: Added IsReadOnly virtual property.
        VirtualMachineDisk: Bugfix: IsReadOnly always returned false.
        VMDK: Improved implementation.
		DiskImage: Added ExclusiveLock() overload for overlapped IO
        NTFS: NTFSVolume: Added IsReadOnly property.
        NTFS: Major improvements to logging implementation.
        NTFS: Log changes to MFT data and changes to Bitmap attributes.
        NTFS: MasterFileTable: GetFileRecord, GetFileRecordSegment: throw InvalidDataException if SequenceNumber does not match FileRecordSegment.
        NTFS: VolumeInformationRecord: Added IsDirty property.
        NTFS: NTFSVolume: throw exception in the constructor if the volume is invalid or not supported.
        NTFS: FileRecordSegment: Bugfix: Alignment of EndMarkerLength to 8-byte boundary was not taken into account.
        NTFS: NTFSVolume: Changed RootDirSegmentReference property from protected internal to public.
        NTFS: IndexHelper: Bugfix: Correctly set BlocksPerIndexRecord when BytesPerIndexRecord > BytesPerCluster.
        NTFS: NTFSVolume: Added support for multithreading.

1.5.2 - FileStreamEx: Fixed ReadOverlapped / WriteOverlapped implementation.
        NTFS: NTFSFileStream: Added support for read-only and write-only access.
        NTFS: NTFSFileStream: Added Closed event handler.
        NTFS: NTFSFileSystem: Keep track of opened streams and throw SharingViolationException when applicable.
        NTFS: LogFile: Bugfix: NextRecordOffset was not set on the last page of a multipage transfer.
        NTFS: LogFile: Keep the last page in memory to reduce disk IO.
        NTFS: NTFSLogClient: Keep the last restart record in memory to avoid reading it from disk when calling WriteRestartRecord().
        NTFS: NTFSLogClient: Bugfix: StartOfCheckpointLsn was not set correctly when writing a non-clean restart record.
        NTFS: LogFile: Read both restart pages and use CurrentLsn to determine which is more recent.
        NTFS: LogFile: WriteRecord: If CleanDismount is set, update the restart page after writing the record.
        NTFS: LogFile: Always write restart page after completing an IO transfer.
        NTFS: LogFile: Bugfix: A consecutive restart page was written with the same CurrentLsn when writing ClientRestart.
        NTFS: LogFile: Replaced WriteRecord() method with FlushRecords() which supports writing multiple records at once.
        NTFS: LogFile: WriteRecord: Added flushToDisk parameter to reduce number of IO operations.
        NTFS: Bugfix: Directory index update was not thread-safe.
        NTFS: Bugfix: Checking if a directory is empty before deleting it was not thread-safe.
        NTFS: NTFSVolume: Corrected thread-safety issues when creating / moving / deleting files.
        NTFS: MasterFileTable: GetFileRecordSegment() and GetFileRecord() will no longer return null and will throw InvalidDataException instead.
        NTFS: NTFSVolume: GetFileRecord: Improved implementation and thread-safety.
        NTFS: NTFSVolume: Use lock statements instead of ReaderWriterLock to synchronize MFT operations.
        NTFS: MultiSectorHelper: Throw InvalidDataException if UpdateSequence ArrayOffset value is out of range.
        NTFS: NTFSVolume: GetFileRecord: throw FileNotFoundException, DirectoryNotFoundException or InvalidPathException instead of returning null.
        NTFS: IndexData: Bugfix: RemoveEntry threw ArgumentOutOfRangeException in some cases.
        NTFS: LogFile: FlushRecords: Bugfix: PagePosition was not correctly set upon reuse.
        NTFS: NTFSFile: Improved implementation, can now access Alternate Data Streams.
        Added InvalidPathException implementation.        

1.5.3 - NTFS: Changed NTFS version fields to byte to match VolumeInformation attribute record.
        NTFS: NTFSBootRecord: Improved implementation.
        NTFS: MasterFileTable: Marked all predefined segment numbers as internal.
        NTFS: VolumeBitmap: Marked ExtendGranularity and Bitmap methods as internal.
        NTFS: BitmapData: Marked ExtendGranularity and bitmap methods as internal.
        NTFS: LfsRestartArea: Improved implementation.
        NTFS: AttributeDefinitionEntry: Added constructor.
        NTFS: Improved control over during attribute creation whether it will be resident or non-resident.
        NTFS: AttributeDefinition: Added GetBytes method.
        NTFS: LfsClientRecord: Corrected ClientNameMaxLength and Length values, Improved constructor.
        NTFS: IndexHelper: InitializeIndexRoot: CollationRule now has to be specified excplicitly.
        NTFS: FileRecordFlags: Added IsExtension and IsSpecialIndex flags.
        NTFS: NTFSLogClient: Marked ClientName as internal.
        NTFS: LogFile: Added IsClientInUse method.
        NTFS: NTFSLogClient: Throw NotSupportedException if client is not in use.
        NTFS: NTFSLogClient: Support ClientRestartLsn == 0 (on a freshly formatted disk).
        NTFS: LogFile: Support CurrentLsn == 0 (on a freshly formatted disk).
        NTFS: LFSRestartPage: Added Create method.
        NTFS: Added NTFSVolumeCreator class.
        NTFS: NTFSLogClient: WriteRestartRecord: Removed unnecessary parameter.
        NTFS: NTFSLogClient: Added WriteForgetTransactionRecord overload with flushToDisk parameter.
        NTFS: NTFSLogClient: WriteLogRecord: The recordOffset and attributeOffset parameters can now be specified.
        NTFS: NTFSLogClient: Bugfix: Set BytesPerIndexBuffer for IndexAllocation attribute when writing OpenAttributeEntry.
        NTFS: NTFSLogClient: Bugfix: Write an initial NTFS restart record before any log record if the disk is freshly formatted.
        NTFS: IndexEntry: Added GetBytes method.
        NTFS: IndexRecord: Added GetEntryOffset method.
        NTFS: IndexData: Added ConvertToDataOffset method.
        NTFS: NTFSVolumeCreator: Improved documentation.
        NTFS: IndexData: Marked ReadIndexRecord method as internal.
        NTFS: NTFSLogClient: WriteLogRecord: Bugfix: Correctly handle log records that affect multiple clusters by adding structureLength parameter.
        NTFS: MasterFileTable: AllocateReservedFileRecordSegment: Bugfix: AllocateRecord was given invalid argument which caused an exception.
        NTFS: MasterFileTable: Bugfix: Do not try to read MFT mirror bitmap attribute.
        MasterBootRecord: Improved implementation.
        Settings: Reduced MaximumTransferSizeLBA to 32768 sectors to avoid ERROR_NO_SYSTEM_RESOURCES when using overlapped IO.
        NTFSFileSystem: Read the dates in $Standard_Information instead of the ones in $File_Name which are not updated as often.
        NTFSFileSystem: SetDates: Bugfix: Directory index was not updated.
        NTFSVolume: MoveFile: Use the dates and FileAttributes in $Standard_Information instead $File_Name.
        IFileSystem: Added ListDataStreams method.

1.5.4 - NTFS: NTFSFileSystem: Added support for accessing Alternate Data Streams.
        NTFS: AttributeRecord: The value of Instance can now be set at any point and is no longer set during class instantiation.
        NTFS: FileRecordSegment: Added AddAttributeRecord method.
        NTFS: FileRecord: UpdateSegments: Set AttributeRecord's Instance value using NextAttributeInstance of the FileRecordSegment containing it.
        NTFS: AttributeRecord: Added Clone method.
        NTFS: Clone attributes when assembled from and splitted to FileRecordSegments.
        NTFS: FileRecord: Use Segments for logging purposes.
        NTFS: NTFSVolume: Added ContentType enum to help identify the content of volume clusters being accessed.
        NTFS: AttributeData: Bugfix: Attribute sorting rules were not applied when converting a resident attribute to non-resident.
        NTFS: IndexData: RemoveEntry: Bugfix: IndexOutOfRangeException was thrown in some cases.

1.5.5 - NTFS: FileRecordHelper: Bugfix: In some cases attributes were written to disk in a way that violated sorting rules.
        NTFS: NTFSLogClient: WriteRestartRecord: Bugfix: attribute name table was not written.
        NTFS: FileRecordHelper: Bugfix: Do not assume attribute fragments are sorted by LowestVCN when read from segments ordered by segment number.
        NTFS: MasterFileTable: AllocateReservedFileRecordSegment: Throw NotSupportedException instead of DiskFullException if all reserved file record segments have been exhausted.
        NTFS: Added LogFileData to ContentType enum.
        NTFS: NTFSVolumeCreator: Added Format method overload.
        NTFS: LogFile: Throw InvalidDataException if LfsRecord LSN points to an uninitialized page.
        NTFS: ResidentAttributeRecord: Bugfix: Data was not aligned to 8-byte boundary in some cases.
        NTFS: ResidentAttributeRecord: Throw InvalidDataException if data is not aligned to 8-byte boundary.
        NTFS: AttributeRecord: Throw InvalidDataException if attribute record is not aligned to 8-byte boundary.
        NTFS: FileRecordSegment: Throw InvalidDataException if first attribute is not aligned to 8-byte boundary.
        NTFS: NTFSVolume: Improved free space check before CreateFile and MoveFile.
        NTFS: MasterFileTable: Extend: Use MaximumTransferSizeLBA when zeroing-out MFT Data extension.
        NTFS: MasterFileTable: Increased MFT extend granularity to decrease MFT fragmentation.
        NTFS: AttributeData: Extend: Bugfix: Attempted to write partial cluster that was not the last cluster when converting attribute to non-resident.
